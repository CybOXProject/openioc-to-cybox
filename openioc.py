#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Wed Apr 04 15:04:05 2012 by generateDS.py version 2.7b.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class IocTermList(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, last_modified=None, iocterm=None):
        self.last_modified = _cast(None, last_modified)
        if iocterm is None:
            self.iocterm = []
        else:
            self.iocterm = iocterm
    def factory(*args_, **kwargs_):
        if IocTermList.subclass:
            return IocTermList.subclass(*args_, **kwargs_)
        else:
            return IocTermList(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_iocterm(self): return self.iocterm
    def set_iocterm(self, iocterm): self.iocterm = iocterm
    def add_iocterm(self, value): self.iocterm.append(value)
    def insert_iocterm(self, index, value): self.iocterm[index] = value
    def get_last_modified(self): return self.last_modified
    def set_last_modified(self, last_modified): self.last_modified = last_modified
    def export(self, outfile, level, namespace_='tns:', name_='IocTermList', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IocTermList')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='IocTermList'):
        if self.last_modified is not None and 'last_modified' not in already_processed:
            already_processed.append('last_modified')
            outfile.write(' last-modified=%s' % (self.gds_format_string(quote_attrib(self.last_modified).encode(ExternalEncoding), input_name='last-modified'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='IocTermList', fromsubclass_=False):
        for iocterm_ in self.iocterm:
            iocterm_.export(outfile, level, namespace_, name_='iocterm')
    def hasContent_(self):
        if (
            self.iocterm
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='IocTermList'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.last_modified is not None and 'last_modified' not in already_processed:
            already_processed.append('last_modified')
            showIndent(outfile, level)
            outfile.write('last_modified = "%s",\n' % (self.last_modified,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('iocterm=[\n')
        level += 1
        for iocterm_ in self.iocterm:
            showIndent(outfile, level)
            outfile.write('model_.IocTerm(\n')
            iocterm_.exportLiteral(outfile, level, name_='IocTerm')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('last-modified', node)
        if value is not None and 'last-modified' not in already_processed:
            already_processed.append('last-modified')
            self.last_modified = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'iocterm':
            obj_ = IocTerm.factory()
            obj_.build(child_)
            self.iocterm.append(obj_)
# end class IocTermList


class IocTerm(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, text=None, processor_type=None, display_type=None, data_type=None, title=None, anytypeobjs_=None):
        self.text = _cast(None, text)
        self.processor_type = _cast(None, processor_type)
        self.display_type = _cast(None, display_type)
        self.data_type = _cast(None, data_type)
        self.title = _cast(None, title)
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if IocTerm.subclass:
            return IocTerm.subclass(*args_, **kwargs_)
        else:
            return IocTerm(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_text(self): return self.text
    def set_text(self, text): self.text = text
    def get_processor_type(self): return self.processor_type
    def set_processor_type(self, processor_type): self.processor_type = processor_type
    def get_display_type(self): return self.display_type
    def set_display_type(self, display_type): self.display_type = display_type
    def get_data_type(self): return self.data_type
    def set_data_type(self, data_type): self.data_type = data_type
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def export(self, outfile, level, namespace_='tns:', name_='IocTerm', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IocTerm')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='IocTerm'):
        if self.text is not None and 'text' not in already_processed:
            already_processed.append('text')
            outfile.write(' text=%s' % (self.gds_format_string(quote_attrib(self.text).encode(ExternalEncoding), input_name='text'), ))
        if self.processor_type is not None and 'processor_type' not in already_processed:
            already_processed.append('processor_type')
            outfile.write(' processor-type=%s' % (self.gds_format_string(quote_attrib(self.processor_type).encode(ExternalEncoding), input_name='processor-type'), ))
        if self.display_type is not None and 'display_type' not in already_processed:
            already_processed.append('display_type')
            outfile.write(' display-type=%s' % (self.gds_format_string(quote_attrib(self.display_type).encode(ExternalEncoding), input_name='display-type'), ))
        if self.data_type is not None and 'data_type' not in already_processed:
            already_processed.append('data_type')
            outfile.write(' data-type=%s' % (self.gds_format_string(quote_attrib(self.data_type).encode(ExternalEncoding), input_name='data-type'), ))
        if self.title is not None and 'title' not in already_processed:
            already_processed.append('title')
            outfile.write(' title=%s' % (self.gds_format_string(quote_attrib(self.title).encode(ExternalEncoding), input_name='title'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='IocTerm', fromsubclass_=False):
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_)
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='IocTerm'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.text is not None and 'text' not in already_processed:
            already_processed.append('text')
            showIndent(outfile, level)
            outfile.write('text = "%s",\n' % (self.text,))
        if self.processor_type is not None and 'processor_type' not in already_processed:
            already_processed.append('processor_type')
            showIndent(outfile, level)
            outfile.write('processor_type = "%s",\n' % (self.processor_type,))
        if self.display_type is not None and 'display_type' not in already_processed:
            already_processed.append('display_type')
            showIndent(outfile, level)
            outfile.write('display_type = "%s",\n' % (self.display_type,))
        if self.data_type is not None and 'data_type' not in already_processed:
            already_processed.append('data_type')
            showIndent(outfile, level)
            outfile.write('data_type = "%s",\n' % (self.data_type,))
        if self.title is not None and 'title' not in already_processed:
            already_processed.append('title')
            showIndent(outfile, level)
            outfile.write('title = "%s",\n' % (self.title,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.anytypeobjs_ is not None:
            showIndent(outfile, level)
            outfile.write('anytypeobjs_=model_.anytypeobjs_(\n')
            self.anytypeobjs_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('text', node)
        if value is not None and 'text' not in already_processed:
            already_processed.append('text')
            self.text = value
        value = find_attr_value_('processor-type', node)
        if value is not None and 'processor-type' not in already_processed:
            already_processed.append('processor-type')
            self.processor_type = value
        value = find_attr_value_('display-type', node)
        if value is not None and 'display-type' not in already_processed:
            already_processed.append('display-type')
            self.display_type = value
        value = find_attr_value_('data-type', node)
        if value is not None and 'data-type' not in already_processed:
            already_processed.append('data-type')
            self.data_type = value
        value = find_attr_value_('title', node)
        if value is not None and 'title' not in already_processed:
            already_processed.append('title')
            self.title = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        obj_ = self.gds_build_any(child_, 'IocTerm')
        if obj_ is not None:
            self.set_anytypeobjs_(obj_)
# end class IocTerm


class MetricList(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, metric=None):
        if metric is None:
            self.metric = []
        else:
            self.metric = metric
    def factory(*args_, **kwargs_):
        if MetricList.subclass:
            return MetricList.subclass(*args_, **kwargs_)
        else:
            return MetricList(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_metric(self): return self.metric
    def set_metric(self, metric): self.metric = metric
    def add_metric(self, value): self.metric.append(value)
    def insert_metric(self, index, value): self.metric[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='MetricList', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MetricList')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='MetricList'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='MetricList', fromsubclass_=False):
        for metric_ in self.metric:
            metric_.export(outfile, level, namespace_, name_='metric')
    def hasContent_(self):
        if (
            self.metric
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='MetricList'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('metric=[\n')
        level += 1
        for metric_ in self.metric:
            showIndent(outfile, level)
            outfile.write('model_.Metric(\n')
            metric_.exportLiteral(outfile, level, name_='Metric')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'metric':
            obj_ = Metric.factory()
            obj_.build(child_)
            self.metric.append(obj_)
# end class MetricList


class Metric(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, src=None, name=None, value=None):
        self.src = _cast(None, src)
        self.name = _cast(None, name)
        self.value = _cast(float, value)
        pass
    def factory(*args_, **kwargs_):
        if Metric.subclass:
            return Metric.subclass(*args_, **kwargs_)
        else:
            return Metric(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_src(self): return self.src
    def set_src(self, src): self.src = src
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def export(self, outfile, level, namespace_='tns:', name_='Metric', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Metric')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Metric'):
        if self.src is not None and 'src' not in already_processed:
            already_processed.append('src')
            outfile.write(' src=%s' % (self.gds_format_string(quote_attrib(self.src).encode(ExternalEncoding), input_name='src'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            outfile.write(' value="%s"' % self.gds_format_float(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Metric', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Metric'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.src is not None and 'src' not in already_processed:
            already_processed.append('src')
            showIndent(outfile, level)
            outfile.write('src = "%s",\n' % (self.src,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.append('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.append('value')
            showIndent(outfile, level)
            outfile.write('value = %f,\n' % (self.value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('src', node)
        if value is not None and 'src' not in already_processed:
            already_processed.append('src')
            self.src = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.append('name')
            self.name = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.append('value')
            try:
                self.value = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Metric


class IndicatorOfCompromise(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, last_modified=None, id=None, short_description=None, description=None, keywords=None, authored_by=None, authored_date=None, links=None, definition=None):
        self.last_modified = _cast(None, last_modified)
        self.id = _cast(None, id)
        self.short_description = short_description
        self.description = description
        self.keywords = keywords
        self.authored_by = authored_by
        self.authored_date = authored_date
        self.links = links
        self.definition = definition
    def factory(*args_, **kwargs_):
        if IndicatorOfCompromise.subclass:
            return IndicatorOfCompromise.subclass(*args_, **kwargs_)
        else:
            return IndicatorOfCompromise(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_short_description(self): return self.short_description
    def set_short_description(self, short_description): self.short_description = short_description
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_keywords(self): return self.keywords
    def set_keywords(self, keywords): self.keywords = keywords
    def get_authored_by(self): return self.authored_by
    def set_authored_by(self, authored_by): self.authored_by = authored_by
    def get_authored_date(self): return self.authored_date
    def set_authored_date(self, authored_date): self.authored_date = authored_date
    def get_links(self): return self.links
    def set_links(self, links): self.links = links
    def get_definition(self): return self.definition
    def set_definition(self, definition): self.definition = definition
    def get_last_modified(self): return self.last_modified
    def set_last_modified(self, last_modified): self.last_modified = last_modified
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='tns:', name_='IndicatorOfCompromise', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndicatorOfCompromise')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='IndicatorOfCompromise'):
        if self.last_modified is not None and 'last_modified' not in already_processed:
            already_processed.append('last_modified')
            outfile.write(' last-modified=%s' % (self.gds_format_string(quote_attrib(self.last_modified).encode(ExternalEncoding), input_name='last-modified'), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='IndicatorOfCompromise', fromsubclass_=False):
        if self.short_description is not None:
            showIndent(outfile, level)
            outfile.write('<%sshort_description>%s</%sshort_description>\n' % (namespace_, self.gds_format_string(quote_xml(self.short_description).encode(ExternalEncoding), input_name='short_description'), namespace_))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.gds_format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
        if self.keywords is not None:
            showIndent(outfile, level)
            outfile.write('<%skeywords>%s</%skeywords>\n' % (namespace_, self.gds_format_string(quote_xml(self.keywords).encode(ExternalEncoding), input_name='keywords'), namespace_))
        if self.authored_by is not None:
            showIndent(outfile, level)
            outfile.write('<%sauthored_by>%s</%sauthored_by>\n' % (namespace_, self.gds_format_string(quote_xml(self.authored_by).encode(ExternalEncoding), input_name='authored_by'), namespace_))
        if self.authored_date is not None:
            showIndent(outfile, level)
            outfile.write('<%sauthored_date>%s</%sauthored_date>\n' % (namespace_, self.gds_format_string(quote_xml(self.authored_date).encode(ExternalEncoding), input_name='authored_date'), namespace_))
        if self.links is not None:
            self.links.export(outfile, level, namespace_, name_='links')
        if self.definition is not None:
            self.definition.export(outfile, level, namespace_, name_='definition')
    def hasContent_(self):
        if (
            self.short_description is not None or
            self.description is not None or
            self.keywords is not None or
            self.authored_by is not None or
            self.authored_date is not None or
            self.links is not None or
            self.definition is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='IndicatorOfCompromise'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.last_modified is not None and 'last_modified' not in already_processed:
            already_processed.append('last_modified')
            showIndent(outfile, level)
            outfile.write('last_modified = "%s",\n' % (self.last_modified,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.short_description is not None:
            showIndent(outfile, level)
            outfile.write('short_description=%s,\n' % quote_python(self.short_description).encode(ExternalEncoding))
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
        if self.keywords is not None:
            showIndent(outfile, level)
            outfile.write('keywords=%s,\n' % quote_python(self.keywords).encode(ExternalEncoding))
        if self.authored_by is not None:
            showIndent(outfile, level)
            outfile.write('authored_by=%s,\n' % quote_python(self.authored_by).encode(ExternalEncoding))
        if self.authored_date is not None:
            showIndent(outfile, level)
            outfile.write('authored_date=%s,\n' % quote_python(self.authored_date).encode(ExternalEncoding))
        if self.links is not None:
            showIndent(outfile, level)
            outfile.write('links=model_.ArrayOfLink(\n')
            self.links.exportLiteral(outfile, level, name_='links')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.definition is not None:
            showIndent(outfile, level)
            outfile.write('definition=model_.ArrayOfIocIndicator(\n')
            self.definition.exportLiteral(outfile, level, name_='definition')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('last-modified', node)
        if value is not None and 'last-modified' not in already_processed:
            already_processed.append('last-modified')
            self.last_modified = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'short_description':
            short_description_ = child_.text
            short_description_ = self.gds_validate_string(short_description_, node, 'short_description')
            self.short_description = short_description_
        elif nodeName_ == 'description':
            description_ = child_.text
            description_ = self.gds_validate_string(description_, node, 'description')
            self.description = description_
        elif nodeName_ == 'keywords':
            keywords_ = child_.text
            keywords_ = self.gds_validate_string(keywords_, node, 'keywords')
            self.keywords = keywords_
        elif nodeName_ == 'authored_by':
            authored_by_ = child_.text
            authored_by_ = self.gds_validate_string(authored_by_, node, 'authored_by')
            self.authored_by = authored_by_
        elif nodeName_ == 'authored_date':
            authored_date_ = child_.text
            authored_date_ = self.gds_validate_string(authored_date_, node, 'authored_date')
            self.authored_date = authored_date_
        elif nodeName_ == 'links':
            obj_ = ArrayOfLink.factory()
            obj_.build(child_)
            self.set_links(obj_)
        elif nodeName_ == 'definition':
            obj_ = ArrayOfIocIndicator.factory()
            obj_.build(child_)
            self.set_definition(obj_)
# end class IndicatorOfCompromise


class ArrayOfLink(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, link=None):
        if link is None:
            self.link = []
        else:
            self.link = link
    def factory(*args_, **kwargs_):
        if ArrayOfLink.subclass:
            return ArrayOfLink.subclass(*args_, **kwargs_)
        else:
            return ArrayOfLink(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_link(self): return self.link
    def set_link(self, link): self.link = link
    def add_link(self, value): self.link.append(value)
    def insert_link(self, index, value): self.link[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfLink', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfLink')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfLink'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfLink', fromsubclass_=False):
        for link_ in self.link:
            link_.export(outfile, level, namespace_, name_='link')
    def hasContent_(self):
        if (
            self.link
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ArrayOfLink'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('link=[\n')
        level += 1
        for link_ in self.link:
            showIndent(outfile, level)
            outfile.write('model_.Link(\n')
            link_.exportLiteral(outfile, level, name_='Link')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'link':
            obj_ = Link.factory()
            obj_.build(child_)
            self.link.append(obj_)
# end class ArrayOfLink


class Identity(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, href=None, valueOf_=None, mixedclass_=None, content_=None, extensiontype_=None):
        self.href = _cast(None, href)
        self.valueOf_ = valueOf_
        self.extensiontype_ = extensiontype_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if Identity.subclass:
            return Identity.subclass(*args_, **kwargs_)
        else:
            return Identity(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_href(self): return self.href
    def set_href(self, href): self.href = href
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def export(self, outfile, level, namespace_='tns:', name_='Identity', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Identity')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Identity'):
        if self.href is not None and 'href' not in already_processed:
            already_processed.append('href')
            outfile.write(' href=%s' % (self.gds_format_string(quote_attrib(self.href).encode(ExternalEncoding), input_name='href'), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Identity', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Identity'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.href is not None and 'href' not in already_processed:
            already_processed.append('href')
            showIndent(outfile, level)
            outfile.write('href = "%s",\n' % (self.href,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('href', node)
        if value is not None and 'href' not in already_processed:
            already_processed.append('href')
            self.href = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.append('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        pass
# end class Identity


class ArrayOfIocIndicator(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Indicator=None):
        if Indicator is None:
            self.Indicator = []
        else:
            self.Indicator = Indicator
    def factory(*args_, **kwargs_):
        if ArrayOfIocIndicator.subclass:
            return ArrayOfIocIndicator.subclass(*args_, **kwargs_)
        else:
            return ArrayOfIocIndicator(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Indicator(self): return self.Indicator
    def set_Indicator(self, Indicator): self.Indicator = Indicator
    def add_Indicator(self, value): self.Indicator.append(value)
    def insert_Indicator(self, index, value): self.Indicator[index] = value
    def export(self, outfile, level, namespace_='tns:', name_='ArrayOfIocIndicator', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ArrayOfIocIndicator')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='ArrayOfIocIndicator'):
        pass
    def exportChildren(self, outfile, level, namespace_='tns:', name_='ArrayOfIocIndicator', fromsubclass_=False):
        for Indicator_ in self.Indicator:
            Indicator_.export(outfile, level, namespace_, name_='Indicator')
    def hasContent_(self):
        if (
            self.Indicator
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ArrayOfIocIndicator'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Indicator=[\n')
        level += 1
        for Indicator_ in self.Indicator:
            showIndent(outfile, level)
            outfile.write('model_.IocIndicator(\n')
            Indicator_.exportLiteral(outfile, level, name_='IocIndicator')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Indicator':
            obj_ = IocIndicator.factory()
            obj_.build(child_)
            self.Indicator.append(obj_)
# end class ArrayOfIocIndicator


class IocIndicator(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, operator=None, id=None, IndicatorItem=None, Indicator=None, param=None):
        self.operator = _cast(None, operator)
        self.id = _cast(None, id)
        if IndicatorItem is None:
            self.IndicatorItem = []
        else:
            self.IndicatorItem = IndicatorItem
        if Indicator is None:
            self.Indicator = []
        else:
            self.Indicator = Indicator
        if param is None:
            self.param = []
        else:
            self.param = param
    def factory(*args_, **kwargs_):
        if IocIndicator.subclass:
            return IocIndicator.subclass(*args_, **kwargs_)
        else:
            return IocIndicator(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IndicatorItem(self): return self.IndicatorItem
    def set_IndicatorItem(self, IndicatorItem): self.IndicatorItem = IndicatorItem
    def add_IndicatorItem(self, value): self.IndicatorItem.append(value)
    def insert_IndicatorItem(self, index, value): self.IndicatorItem[index] = value
    def get_Indicator(self): return self.Indicator
    def set_Indicator(self, Indicator): self.Indicator = Indicator
    def add_Indicator(self, value): self.Indicator.append(value)
    def insert_Indicator(self, index, value): self.Indicator[index] = value
    def get_param(self): return self.param
    def set_param(self, param): self.param = param
    def add_param(self, value): self.param.append(value)
    def insert_param(self, index, value): self.param[index] = value
    def get_operator(self): return self.operator
    def set_operator(self, operator): self.operator = operator
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def export(self, outfile, level, namespace_='tns:', name_='IocIndicator', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IocIndicator')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='IocIndicator'):
        if self.operator is not None and 'operator' not in already_processed:
            already_processed.append('operator')
            outfile.write(' operator=%s' % (quote_attrib(self.operator), ))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='IocIndicator', fromsubclass_=False):
        for IndicatorItem_ in self.IndicatorItem:
            IndicatorItem_.export(outfile, level, namespace_, name_='IndicatorItem')
        for Indicator_ in self.Indicator:
            Indicator_.export(outfile, level, namespace_, name_='Indicator')
        for param_ in self.param:
            showIndent(outfile, level)
            outfile.write('<%sparam>%s</%sparam>\n' % (namespace_, self.gds_format_string(quote_xml(param_).encode(ExternalEncoding), input_name='param'), namespace_))
    def hasContent_(self):
        if (
            self.IndicatorItem or
            self.Indicator or
            self.param
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='IocIndicator'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.operator is not None and 'operator' not in already_processed:
            already_processed.append('operator')
            showIndent(outfile, level)
            outfile.write('operator = %s,\n' % (self.operator,))
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('IndicatorItem=[\n')
        level += 1
        for IndicatorItem_ in self.IndicatorItem:
            showIndent(outfile, level)
            outfile.write('model_.IndicatorItem(\n')
            IndicatorItem_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Indicator=[\n')
        level += 1
        for Indicator_ in self.Indicator:
            showIndent(outfile, level)
            outfile.write('model_.IocIndicator(\n')
            Indicator_.exportLiteral(outfile, level, name_='IocIndicator')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('param=[\n')
        level += 1
        for param_ in self.param:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(param_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('operator', node)
        if value is not None and 'operator' not in already_processed:
            already_processed.append('operator')
            self.operator = value
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IndicatorItem':
            obj_ = IndicatorItem.factory()
            obj_.build(child_)
            self.IndicatorItem.append(obj_)
        elif nodeName_ == 'Indicator':
            obj_ = IocIndicator.factory()
            obj_.build(child_)
            self.Indicator.append(obj_)
        elif nodeName_ == 'param':
            param_ = child_.text
            param_ = self.gds_validate_string(param_, node, 'param')
            self.param.append(param_)
# end class IocIndicator


class IndicatorItem(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, condition=None, Context=None, Content=None, Comment=None, param=None):
        self.id = _cast(None, id)
        self.condition = _cast(None, condition)
        self.Context = Context
        self.Content = Content
        self.Comment = Comment
        if param is None:
            self.param = []
        else:
            self.param = param
    def factory(*args_, **kwargs_):
        if IndicatorItem.subclass:
            return IndicatorItem.subclass(*args_, **kwargs_)
        else:
            return IndicatorItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Context(self): return self.Context
    def set_Context(self, Context): self.Context = Context
    def get_Content(self): return self.Content
    def set_Content(self, Content): self.Content = Content
    def get_Comment(self): return self.Comment
    def set_Comment(self, Comment): self.Comment = Comment
    def get_param(self): return self.param
    def set_param(self, param): self.param = param
    def add_param(self, value): self.param.append(value)
    def insert_param(self, index, value): self.param[index] = value
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_condition(self): return self.condition
    def set_condition(self, condition): self.condition = condition
    def export(self, outfile, level, namespace_='tns:', name_='IndicatorItem', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndicatorItem')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='IndicatorItem'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
        if self.condition is not None and 'condition' not in already_processed:
            already_processed.append('condition')
            outfile.write(' condition=%s' % (self.gds_format_string(quote_attrib(self.condition).encode(ExternalEncoding), input_name='condition'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='IndicatorItem', fromsubclass_=False):
        if self.Context is not None:
            self.Context.export(outfile, level, namespace_, name_='Context')
        if self.Content is not None:
            self.Content.export(outfile, level, namespace_, name_='Content')
        if self.Comment is not None:
            showIndent(outfile, level)
            outfile.write('<%sComment>%s</%sComment>\n' % (namespace_, self.gds_format_string(quote_xml(self.Comment).encode(ExternalEncoding), input_name='Comment'), namespace_))
        for param_ in self.param:
            showIndent(outfile, level)
            outfile.write('<%sparam>%s</%sparam>\n' % (namespace_, self.gds_format_string(quote_xml(param_).encode(ExternalEncoding), input_name='param'), namespace_))
    def hasContent_(self):
        if (
            self.Context is not None or
            self.Content is not None or
            self.Comment is not None or
            self.param
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='IndicatorItem'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.append('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
        if self.condition is not None and 'condition' not in already_processed:
            already_processed.append('condition')
            showIndent(outfile, level)
            outfile.write('condition = "%s",\n' % (self.condition,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Context is not None:
            showIndent(outfile, level)
            outfile.write('Context=model_.IndicatorItemContext(\n')
            self.Context.exportLiteral(outfile, level, name_='Context')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Content is not None:
            showIndent(outfile, level)
            outfile.write('Content=model_.IndicatorItemContent(\n')
            self.Content.exportLiteral(outfile, level, name_='Content')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Comment is not None:
            showIndent(outfile, level)
            outfile.write('Comment=%s,\n' % quote_python(self.Comment).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('param=[\n')
        level += 1
        for param_ in self.param:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(param_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.append('id')
            self.id = value
        value = find_attr_value_('condition', node)
        if value is not None and 'condition' not in already_processed:
            already_processed.append('condition')
            self.condition = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Context':
            obj_ = IndicatorItemContext.factory()
            obj_.build(child_)
            self.set_Context(obj_)
        elif nodeName_ == 'Content':
            obj_ = IndicatorItemContent.factory()
            obj_.build(child_)
            self.set_Content(obj_)
        elif nodeName_ == 'Comment':
            Comment_ = child_.text
            Comment_ = self.gds_validate_string(Comment_, node, 'Comment')
            self.Comment = Comment_
        elif nodeName_ == 'param':
            param_ = child_.text
            param_ = self.gds_validate_string(param_, node, 'param')
            self.param.append(param_)
# end class IndicatorItem


class IndicatorItemContext(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, search=None, document=None, type_=None):
        self.search = _cast(None, search)
        self.document = _cast(None, document)
        self.type_ = _cast(None, type_)
        pass
    def factory(*args_, **kwargs_):
        if IndicatorItemContext.subclass:
            return IndicatorItemContext.subclass(*args_, **kwargs_)
        else:
            return IndicatorItemContext(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_search(self): return self.search
    def set_search(self, search): self.search = search
    def get_document(self): return self.document
    def set_document(self, document): self.document = document
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def export(self, outfile, level, namespace_='tns:', name_='IndicatorItemContext', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndicatorItemContext')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='IndicatorItemContext'):
        if self.search is not None and 'search' not in already_processed:
            already_processed.append('search')
            outfile.write(' search=%s' % (self.gds_format_string(quote_attrib(self.search).encode(ExternalEncoding), input_name='search'), ))
        if self.document is not None and 'document' not in already_processed:
            already_processed.append('document')
            outfile.write(' document=%s' % (self.gds_format_string(quote_attrib(self.document).encode(ExternalEncoding), input_name='document'), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='IndicatorItemContext', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='IndicatorItemContext'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.search is not None and 'search' not in already_processed:
            already_processed.append('search')
            showIndent(outfile, level)
            outfile.write('search = "%s",\n' % (self.search,))
        if self.document is not None and 'document' not in already_processed:
            already_processed.append('document')
            showIndent(outfile, level)
            outfile.write('document = "%s",\n' % (self.document,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            showIndent(outfile, level)
            outfile.write('type_ = "%s",\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('search', node)
        if value is not None and 'search' not in already_processed:
            already_processed.append('search')
            self.search = value
        value = find_attr_value_('document', node)
        if value is not None and 'document' not in already_processed:
            already_processed.append('document')
            self.document = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.append('type')
            self.type_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class IndicatorItemContext


class IndicatorItemContent(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, valueOf_=None):
        self.type_ = _cast(None, type_)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if IndicatorItemContent.subclass:
            return IndicatorItemContent.subclass(*args_, **kwargs_)
        else:
            return IndicatorItemContent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='IndicatorItemContent', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IndicatorItemContent')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='IndicatorItemContent'):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='IndicatorItemContent', fromsubclass_=False):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='IndicatorItemContent'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            showIndent(outfile, level)
            outfile.write('type_ = "%s",\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.append('type')
            self.type_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class IndicatorItemContent


class Link(Identity):
    subclass = None
    superclass = Identity
    def __init__(self, href=None, type_=None, rel=None, title=None, valueOf_=None, mixedclass_=None, content_=None):
        super(Link, self).__init__(href, valueOf_, mixedclass_, content_, )
        self.type_ = _cast(None, type_)
        self.rel = _cast(None, rel)
        self.title = _cast(None, title)
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if Link.subclass:
            return Link.subclass(*args_, **kwargs_)
        else:
            return Link(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_rel(self): return self.rel
    def set_rel(self, rel): self.rel = rel
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='tns:', name_='Link', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Link')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, already_processed, namespace_='tns:', name_='Link'):
        super(Link, self).exportAttributes(outfile, level, already_processed, namespace_, name_='Link')
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.rel is not None and 'rel' not in already_processed:
            already_processed.append('rel')
            outfile.write(' rel=%s' % (self.gds_format_string(quote_attrib(self.rel).encode(ExternalEncoding), input_name='rel'), ))
        if self.title is not None and 'title' not in already_processed:
            already_processed.append('title')
            outfile.write(' title=%s' % (self.gds_format_string(quote_attrib(self.title).encode(ExternalEncoding), input_name='title'), ))
    def exportChildren(self, outfile, level, namespace_='tns:', name_='Link', fromsubclass_=False):
        super(Link, self).exportChildren(outfile, level, namespace_, name_, True)
        pass
    def hasContent_(self):
        if (
            self.valueOf_ or
            super(Link, self).hasContent_()
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Link'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.append('type_')
            showIndent(outfile, level)
            outfile.write('type_ = "%s",\n' % (self.type_,))
        if self.rel is not None and 'rel' not in already_processed:
            already_processed.append('rel')
            showIndent(outfile, level)
            outfile.write('rel = "%s",\n' % (self.rel,))
        if self.title is not None and 'title' not in already_processed:
            already_processed.append('title')
            showIndent(outfile, level)
            outfile.write('title = "%s",\n' % (self.title,))
        super(Link, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(Link, self).exportLiteralChildren(outfile, level, name_)
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.append('type')
            self.type_ = value
        value = find_attr_value_('rel', node)
        if value is not None and 'rel' not in already_processed:
            already_processed.append('rel')
            self.rel = value
        value = find_attr_value_('title', node)
        if value is not None and 'title' not in already_processed:
            already_processed.append('title')
            self.title = value
        super(Link, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
        super(Link, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class Link


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ioc'
        rootClass = IndicatorOfCompromise
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ioc'
        rootClass = ioc
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="ioc",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'ioc'
        rootClass = ioc
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from openioc import *\n\n')
    sys.stdout.write('import openioc as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "ArrayOfIocIndicator",
    "ArrayOfLink",
    "Identity",
    "IndicatorItem",
    "IndicatorItemContent",
    "IndicatorItemContext",
    "IndicatorOfCompromise",
    "IocIndicator",
    "IocTerm",
    "IocTermList",
    "Link",
    "Metric",
    "MetricList"
    ]
