#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Mon Apr 09 15:19:38 2012 by generateDS.py version 2.7b.
#

import sys
import getopt
import re as re_
import system_object_1_2 as system_object
import common_types_1_0 as common

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class WindowsSystemObjectType(system_object.SystemObjectType):
    """The WindowsSystemObjectType type is intended to characterize Windows
    systems."""
    subclass = None
    superclass = system_object.SystemObjectType
    def __init__(self, Available_Physical_Memory=None, BIOS_Info=None, Date=None, Hostname=None, Local_Time=None, Network_Interface_List=None, OS=None, Processor=None, Processor_Architecture=None, System_Time=None, Timezone_DST=None, Timezone_Standard=None, Total_Physical_Memory=None, Uptime=None, Username=None, Domain=None, Global_Flag_List=None, NetBIOS_Name=None, Open_Handle_List=None, Product_ID=None, Product_Name=None, Registered_Organization=None, Registered_Owner=None, Windows_Directory=None, Windows_System_Directory=None, Windows_Temp_Directory=None):
        super(WindowsSystemObjectType, self).__init__(Available_Physical_Memory, BIOS_Info, Date, Hostname, Local_Time, Network_Interface_List, OS, Processor, Processor_Architecture, System_Time, Timezone_DST, Timezone_Standard, Total_Physical_Memory, Uptime, Username)
        if Domain is None:
            self.Domain = []
        else:
            self.Domain = Domain
        self.Global_Flag_List = Global_Flag_List
        self.NetBIOS_Name = NetBIOS_Name
        self.Open_Handle_List = Open_Handle_List
        self.Product_ID = Product_ID
        self.Product_Name = Product_Name
        self.Registered_Organization = Registered_Organization
        self.Registered_Owner = Registered_Owner
        self.Windows_Directory = Windows_Directory
        self.Windows_System_Directory = Windows_System_Directory
        self.Windows_Temp_Directory = Windows_Temp_Directory
    def factory(*args_, **kwargs_):
        if WindowsSystemObjectType.subclass:
            return WindowsSystemObjectType.subclass(*args_, **kwargs_)
        else:
            return WindowsSystemObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Domain(self): return self.Domain
    def set_Domain(self, Domain): self.Domain = Domain
    def add_Domain(self, value): self.Domain.append(value)
    def insert_Domain(self, index, value): self.Domain[index] = value
    def get_Global_Flag_List(self): return self.Global_Flag_List
    def set_Global_Flag_List(self, Global_Flag_List): self.Global_Flag_List = Global_Flag_List
    def get_NetBIOS_Name(self): return self.NetBIOS_Name
    def set_NetBIOS_Name(self, NetBIOS_Name): self.NetBIOS_Name = NetBIOS_Name
    def get_Open_Handle_List(self): return self.Open_Handle_List
    def set_Open_Handle_List(self, Open_Handle_List): self.Open_Handle_List = Open_Handle_List
    def get_Product_ID(self): return self.Product_ID
    def set_Product_ID(self, Product_ID): self.Product_ID = Product_ID
    def get_Product_Name(self): return self.Product_Name
    def set_Product_Name(self, Product_Name): self.Product_Name = Product_Name
    def get_Registered_Organization(self): return self.Registered_Organization
    def set_Registered_Organization(self, Registered_Organization): self.Registered_Organization = Registered_Organization
    def get_Registered_Owner(self): return self.Registered_Owner
    def set_Registered_Owner(self, Registered_Owner): self.Registered_Owner = Registered_Owner
    def get_Windows_Directory(self): return self.Windows_Directory
    def set_Windows_Directory(self, Windows_Directory): self.Windows_Directory = Windows_Directory
    def get_Windows_System_Directory(self): return self.Windows_System_Directory
    def set_Windows_System_Directory(self, Windows_System_Directory): self.Windows_System_Directory = Windows_System_Directory
    def get_Windows_Temp_Directory(self): return self.Windows_Temp_Directory
    def set_Windows_Temp_Directory(self, Windows_Temp_Directory): self.Windows_Temp_Directory = Windows_Temp_Directory
    def export(self, outfile, level, namespace_='WinSystemObj:', name_='WindowsSystemObjectType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WindowsSystemObjectType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, 'WinSystemObj:', name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='WinSystemObj:', name_='WindowsSystemObjectType'):
        super(WindowsSystemObjectType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='WindowsSystemObjectType')
    def exportChildren(self, outfile, level, namespace_='WinSystemObj:', name_='WindowsSystemObjectType', fromsubclass_=False):
        for Domain_ in self.Domain:
            Domain_.export(outfile, level, namespace_, name_='Domain')
        if self.Global_Flag_List is not None:
            self.Global_Flag_List.export(outfile, level, namespace_, name_='Global_Flag_List')
        if self.NetBIOS_Name is not None:
            self.NetBIOS_Name.export(outfile, level, namespace_, name_='NetBIOS_Name')
        if self.Open_Handle_List is not None:
            self.Open_Handle_List.export(outfile, level, namespace_, name_='Open_Handle_List')
        if self.Product_ID is not None:
            self.Product_ID.export(outfile, level, namespace_, name_='Product_ID')
        if self.Product_Name is not None:
            self.Product_Name.export(outfile, level, namespace_, name_='Product_Name')
        if self.Registered_Organization is not None:
            self.Registered_Organization.export(outfile, level, namespace_, name_='Registered_Organization')
        if self.Registered_Owner is not None:
            self.Registered_Owner.export(outfile, level, namespace_, name_='Registered_Owner')
        if self.Windows_Directory is not None:
            self.Windows_Directory.export(outfile, level, namespace_, name_='Windows_Directory')
        if self.Windows_System_Directory is not None:
            self.Windows_System_Directory.export(outfile, level, namespace_, name_='Windows_System_Directory')
        if self.Windows_Temp_Directory is not None:
            self.Windows_Temp_Directory.export(outfile, level, namespace_, name_='Windows_Temp_Directory')
        super(WindowsSystemObjectType, self).exportChildren(outfile, level, namespace_, name_, True)
    def hasContent_(self):
        if (
            self.Domain or
            self.Global_Flag_List is not None or
            self.NetBIOS_Name is not None or
            self.Open_Handle_List is not None or
            self.Product_ID is not None or
            self.Product_Name is not None or
            self.Registered_Organization is not None or
            self.Registered_Owner is not None or
            self.Windows_Directory is not None or
            self.Windows_System_Directory is not None or
            self.Windows_Temp_Directory is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='WindowsSystemObjectType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Domain=[\n')
        level += 1
        for Domain_ in self.Domain:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(Domain_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.Global_Flag_List is not None:
            showIndent(outfile, level)
            outfile.write('Global_Flag_List=model_.GlobalFlagListType(\n')
            self.Global_Flag_List.exportLiteral(outfile, level, name_='Global_Flag_List')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.NetBIOS_Name is not None:
            showIndent(outfile, level)
            outfile.write('NetBIOS_Name=%s,\n' % quote_python(self.NetBIOS_Name).encode(ExternalEncoding))
        if self.Open_Handle_List is not None:
            showIndent(outfile, level)
            outfile.write('Open_Handle_List=%s,\n' % quote_python(self.Open_Handle_List).encode(ExternalEncoding))
        if self.Product_ID is not None:
            showIndent(outfile, level)
            outfile.write('Product_ID=%s,\n' % quote_python(self.Product_ID).encode(ExternalEncoding))
        if self.Product_Name is not None:
            showIndent(outfile, level)
            outfile.write('Product_Name=%s,\n' % quote_python(self.Product_Name).encode(ExternalEncoding))
        if self.Registered_Organization is not None:
            showIndent(outfile, level)
            outfile.write('Registered_Organization=%s,\n' % quote_python(self.Registered_Organization).encode(ExternalEncoding))
        if self.Registered_Owner is not None:
            showIndent(outfile, level)
            outfile.write('Registered_Owner=%s,\n' % quote_python(self.Registered_Owner).encode(ExternalEncoding))
        if self.Windows_Directory is not None:
            showIndent(outfile, level)
            outfile.write('Windows_Directory=%s,\n' % quote_python(self.Windows_Directory).encode(ExternalEncoding))
        if self.Windows_System_Directory is not None:
            showIndent(outfile, level)
            outfile.write('Windows_System_Directory=%s,\n' % quote_python(self.Windows_System_Directory).encode(ExternalEncoding))
        if self.Windows_Temp_Directory is not None:
            showIndent(outfile, level)
            outfile.write('Windows_Temp_Directory=%s,\n' % quote_python(self.Windows_Temp_Directory).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        super(FileObjectType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Domain':
            Domain_ = common.StringObjectAttributeType.factory()
            Domain_.build(child_)
            self.set_Domain(Domain_)
        elif nodeName_ == 'Global_Flag_List':
            obj_ = GlobalFlagListType.factory()
            obj_.build(child_)
            self.set_Global_Flag_List(obj_)
        elif nodeName_ == 'NetBIOS_Name':
            NetBIOS_Name_ = common.StringObjectAttributeType.factory()
            NetBIOS_Name_.build(child_)
            self.set_NetBIOS_Name(NetBIOS_Name_)
        elif nodeName_ == 'Open_Handle_List':
            Open_Handle_List_ = common.StringObjectAttributeType.factory()
            Open_Handle_List_.build(child_)
            self.set_Open_Handle_List(Open_Handle_List_)
        elif nodeName_ == 'Product_ID':
            Product_ID_ = common.StringObjectAttributeType.factory()
            Product_ID_.build(child_)
            self.set_Product_ID(Product_ID_)
        elif nodeName_ == 'Product_Name':
            Product_Name_ = common.StringObjectAttributeType.factory()
            Product_Name_.build(child_)
            self.set_Product_Name(Product_Name_)
        elif nodeName_ == 'Registered_Organization':
            Registered_Organization_ = common.StringObjectAttributeType.factory()
            Registered_Organization_.build(child_)
            self.set_Registered_Organization(Registered_Organization_)
        elif nodeName_ == 'Registered_Owner':
            Registered_Owner_ = common.StringObjectAttributeType.factory()
            Registered_Owner_.build(child_)
            self.set_Registered_Owner(Registered_Owner_)
        elif nodeName_ == 'Windows_Directory':
            Windows_Directory_ = common.StringObjectAttributeType.factory()
            Windows_Directory_.build(child_)
            self.set_Windows_Directory(Windows_Directory_)
        elif nodeName_ == 'Windows_System_Directory':
            Windows_System_Directory_ = common.StringObjectAttributeType.factory()
            Windows_System_Directory_.build(child_)
            self.set_Windows_System_Directory(Windows_System_Directory_)
        elif nodeName_ == 'Windows_Temp_Directory':
            Windows_Temp_Directory_ = common.StringObjectAttributeType.factory()
            Windows_Temp_Directory_.build(child_)
            self.set_Windows_Temp_Directory(Windows_Temp_Directory_)
        super(WindowsSystemObjectType, self).buildChildren(child_, node, nodeName_, True)
# end class WindowsSystemObjectType


class GlobalFlagListType(GeneratedsSuper):
    """The GlobalFlagListType type is a listing of all Windows global
    flags."""
    subclass = None
    superclass = None
    def __init__(self, Global_Flag=None):
        if Global_Flag is None:
            self.Global_Flag = []
        else:
            self.Global_Flag = Global_Flag
    def factory(*args_, **kwargs_):
        if GlobalFlagListType.subclass:
            return GlobalFlagListType.subclass(*args_, **kwargs_)
        else:
            return GlobalFlagListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Global_Flag(self): return self.Global_Flag
    def set_Global_Flag(self, Global_Flag): self.Global_Flag = Global_Flag
    def add_Global_Flag(self, value): self.Global_Flag.append(value)
    def insert_Global_Flag(self, index, value): self.Global_Flag[index] = value
    def export(self, outfile, level, namespace_='WinSystemObj:', name_='GlobalFlagListType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GlobalFlagListType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='WinSystemObj:', name_='GlobalFlagListType'):
        pass
    def exportChildren(self, outfile, level, namespace_='WinSystemObj:', name_='GlobalFlagListType', fromsubclass_=False):
        for Global_Flag_ in self.Global_Flag:
            Global_Flag_.export(outfile, level, namespace_, name_='Global_Flag')
    def hasContent_(self):
        if (
            self.Global_Flag
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GlobalFlagListType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Global_Flag=[\n')
        level += 1
        for Global_Flag_ in self.Global_Flag:
            showIndent(outfile, level)
            outfile.write('model_.GlobalFlagType(\n')
            Global_Flag_.exportLiteral(outfile, level, name_='GlobalFlagType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Global_Flag':
            obj_ = GlobalFlagType.factory()
            obj_.build(child_)
            self.Global_Flag.append(obj_)
# end class GlobalFlagListType


class GlobalFlagType(GeneratedsSuper):
    """The GlobalFlagType type is intended to characterize Windows global
    flags."""
    subclass = None
    superclass = None
    def __init__(self, Abbreviation=None, Destination=None, Hexadecimal_Value=None, Symbolic_Name=None):
        self.Abbreviation = Abbreviation
        self.Destination = Destination
        self.Hexadecimal_Value = Hexadecimal_Value
        self.Symbolic_Name = Symbolic_Name
    def factory(*args_, **kwargs_):
        if GlobalFlagType.subclass:
            return GlobalFlagType.subclass(*args_, **kwargs_)
        else:
            return GlobalFlagType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Abbreviation(self): return self.Abbreviation
    def set_Abbreviation(self, Abbreviation): self.Abbreviation = Abbreviation
    def get_Destination(self): return self.Destination
    def set_Destination(self, Destination): self.Destination = Destination
    def get_Hexadecimal_Value(self): return self.Hexadecimal_Value
    def set_Hexadecimal_Value(self, Hexadecimal_Value): self.Hexadecimal_Value = Hexadecimal_Value
    def get_Symbolic_Name(self): return self.Symbolic_Name
    def set_Symbolic_Name(self, Symbolic_Name): self.Symbolic_Name = Symbolic_Name
    def export(self, outfile, level, namespace_='WinSystemObj:', name_='GlobalFlagType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GlobalFlagType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='WinSystemObj:', name_='GlobalFlagType'):
        pass
    def exportChildren(self, outfile, level, namespace_='WinSystemObj:', name_='GlobalFlagType', fromsubclass_=False):
        if self.Abbreviation is not None:
            self.Abbreviation.export(outfile, level, namespace_, name_='Abbreviation')
        if self.Destination is not None:
            self.Destination.export(outfile, level, namespace_, name_='Destination')
        if self.Hexadecimal_Value is not None:
            self.Hexadecimal_Value.export(outfile, level, namespace_, name_='Hexadecimal_Value')
        if self.Symbolic_Name is not None:
            self.Symbolic_Name.export(outfile, level, namespace_, name_='Symbolic_Name')
    def hasContent_(self):
        if (
            self.Abbreviation is not None or
            self.Destination is not None or
            self.Hexadecimal_Value is not None or
            self.Symbolic_Name is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='GlobalFlagType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Abbreviation is not None:
            showIndent(outfile, level)
            outfile.write('Abbreviation=%s,\n' % quote_python(self.Abbreviation).encode(ExternalEncoding))
        if self.Destination is not None:
            showIndent(outfile, level)
            outfile.write('Destination=%s,\n' % quote_python(self.Destination).encode(ExternalEncoding))
        if self.Hexadecimal_Value is not None:
            showIndent(outfile, level)
            outfile.write('Hexadecimal_Value=%s,\n' % quote_python(self.Hexadecimal_Value).encode(ExternalEncoding))
        if self.Symbolic_Name is not None:
            showIndent(outfile, level)
            outfile.write('Symbolic_Name=%s,\n' % quote_python(self.Symbolic_Name).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Abbreviation':
            Abbreviation_ = child_.text
            Abbreviation_ = self.gds_validate_string(Abbreviation_, node, 'Abbreviation')
            self.Abbreviation = Abbreviation_
        elif nodeName_ == 'Destination':
            Destination_ = child_.text
            Destination_ = self.gds_validate_string(Destination_, node, 'Destination')
            self.Destination = Destination_
        elif nodeName_ == 'Hexadecimal_Value':
            Hexadecimal_Value_ = child_.text
            Hexadecimal_Value_ = self.gds_validate_string(Hexadecimal_Value_, node, 'Hexadecimal_Value')
            self.Hexadecimal_Value = Hexadecimal_Value_
        elif nodeName_ == 'Symbolic_Name':
            Symbolic_Name_ = child_.text
            Symbolic_Name_ = self.gds_validate_string(Symbolic_Name_, node, 'Symbolic_Name')
            self.Symbolic_Name = Symbolic_Name_
# end class GlobalFlagType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Windows_System'
        rootClass = WindowsSystemObjectType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag, 
        namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Windows_System'
        rootClass = WindowsSystemObjectType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="Windows_System",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Windows_System'
        rootClass = WindowsSystemObjectType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from win_system_object import *\n\n')
    sys.stdout.write('import win_system_object as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "GlobalFlagListType",
    "GlobalFlagType",
    "WindowsSystemObjectType"
    ]
